<?php
// vim: set ts=4 sw=4 sts=4 et:

/**
 * X-Cart
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the software license agreement
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.x-cart.com/license-agreement.html
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to licensing@x-cart.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not modify this file if you wish to upgrade X-Cart to newer versions
 * in the future. If you wish to customize X-Cart for your needs please
 * refer to http://www.x-cart.com/ for more information.
 *
 * @category  X-Cart 5
 * @author    Qualiteam software Ltd <info@x-cart.com>
 * @copyright Copyright (c) 2011-2015 Qualiteam software Ltd <info@x-cart.com>. All rights reserved
 * @license   http://www.x-cart.com/license-agreement.html X-Cart 5 License Agreement
 * @link      http://www.x-cart.com/
 */

namespace XLite\Model;

/**
 * Membership
 *
 * @Entity (repositoryClass="\XLite\Model\Repo\Notification")
 * @Table (name="notifications")
 */
class Notification extends \XLite\Model\Base\I18n
{
    /**
     * Notification templates directory
     *
     * @var string
     *
     * @Id
     * @Column (type="string", length=255, unique=true)
     */
    protected $templatesDirectory = '';

    /**
     * Is available for admin
     *
     * @var boolean
     *
     * @Column (type="boolean")
     */
    protected $availableForAdmin = false;

    /**
     * Is available for admin
     *
     * @var boolean
     *
     * @Column (type="boolean")
     */
    protected $availableForCustomer = false;

    /**
     * Is available for admin
     *
     * @var boolean
     *
     * @Column (type="boolean")
     */
    protected $enabledForAdmin = false;

    /**
     * Is available for admin
     *
     * @var boolean
     *
     * @Column (type="boolean")
     */
    protected $enabledForCustomer = false;

    /**
     * Set templatesDirectory
     *
     * @param string $templatesDirectory
     * @return Notification
     */
    public function setTemplatesDirectory($templatesDirectory)
    {
        $this->templatesDirectory = $templatesDirectory;
        return $this;
    }

    /**
     * Get templatesDirectory
     *
     * @return string 
     */
    public function getTemplatesDirectory()
    {
        return $this->templatesDirectory;
    }

    /**
     * Set availableForAdmin
     *
     * @param boolean $availableForAdmin
     * @return Notification
     */
    public function setAvailableForAdmin($availableForAdmin)
    {
        $this->availableForAdmin = $availableForAdmin;
        return $this;
    }

    /**
     * Get availableForAdmin
     *
     * @return boolean 
     */
    public function getAvailableForAdmin()
    {
        return $this->availableForAdmin;
    }

    /**
     * Set availableForCustomer
     *
     * @param boolean $availableForCustomer
     * @return Notification
     */
    public function setAvailableForCustomer($availableForCustomer)
    {
        $this->availableForCustomer = $availableForCustomer;
        return $this;
    }

    /**
     * Get availableForCustomer
     *
     * @return boolean 
     */
    public function getAvailableForCustomer()
    {
        return $this->availableForCustomer;
    }

    /**
     * Set enabledForAdmin
     *
     * @param boolean $enabledForAdmin
     * @return Notification
     */
    public function setEnabledForAdmin($enabledForAdmin)
    {
        $this->enabledForAdmin = $enabledForAdmin;
        return $this;
    }

    /**
     * Get enabledForAdmin
     *
     * @return boolean 
     */
    public function getEnabledForAdmin()
    {
        return $this->enabledForAdmin;
    }

    /**
     * Set enabledForCustomer
     *
     * @param boolean $enabledForCustomer
     * @return Notification
     */
    public function setEnabledForCustomer($enabledForCustomer)
    {
        $this->enabledForCustomer = $enabledForCustomer;
        return $this;
    }

    /**
     * Get enabledForCustomer
     *
     * @return boolean 
     */
    public function getEnabledForCustomer()
    {
        return $this->enabledForCustomer;
    }

    /**
     * Translations (relation). AUTOGENERATED
     *
     * @var \Doctrine\Common\Collections\ArrayCollection
     *
     * @OneToMany (targetEntity="XLite\Model\NotificationTranslation", mappedBy="owner", cascade={"all"})
     */
    protected $translations;

    /**
     * Translation getter. AUTOGENERATED
     *
     * @return string
     */
    public function getName()
    {
        return $this->getSoftTranslation()->getName();
    }

    /**
     * Translation setter. AUTOGENERATED
     *
     * @param string $value value to set
     *
     * @return void
     */
    public function setName($value)
    {
        $translation = $this->getTranslation();

        if (!$this->hasTranslation($translation->getCode())) {
            $this->addTranslations($translation);
        }

        return $translation->setName($value);
    }

    /**
     * Translation getter. AUTOGENERATED
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->getSoftTranslation()->getDescription();
    }

    /**
     * Translation setter. AUTOGENERATED
     *
     * @param string $value value to set
     *
     * @return void
     */
    public function setDescription($value)
    {
        $translation = $this->getTranslation();

        if (!$this->hasTranslation($translation->getCode())) {
            $this->addTranslations($translation);
        }

        return $translation->setDescription($value);
    }

    /**
     * Translation getter. AUTOGENERATED
     *
     * @return string
     */
    public function getCustomerSubject()
    {
        return $this->getSoftTranslation()->getCustomerSubject();
    }

    /**
     * Translation setter. AUTOGENERATED
     *
     * @param string $value value to set
     *
     * @return void
     */
    public function setCustomerSubject($value)
    {
        $translation = $this->getTranslation();

        if (!$this->hasTranslation($translation->getCode())) {
            $this->addTranslations($translation);
        }

        return $translation->setCustomerSubject($value);
    }

    /**
     * Translation getter. AUTOGENERATED
     *
     * @return string
     */
    public function getCustomerText()
    {
        return $this->getSoftTranslation()->getCustomerText();
    }

    /**
     * Translation setter. AUTOGENERATED
     *
     * @param string $value value to set
     *
     * @return void
     */
    public function setCustomerText($value)
    {
        $translation = $this->getTranslation();

        if (!$this->hasTranslation($translation->getCode())) {
            $this->addTranslations($translation);
        }

        return $translation->setCustomerText($value);
    }

    /**
     * Translation getter. AUTOGENERATED
     *
     * @return string
     */
    public function getAdminSubject()
    {
        return $this->getSoftTranslation()->getAdminSubject();
    }

    /**
     * Translation setter. AUTOGENERATED
     *
     * @param string $value value to set
     *
     * @return void
     */
    public function setAdminSubject($value)
    {
        $translation = $this->getTranslation();

        if (!$this->hasTranslation($translation->getCode())) {
            $this->addTranslations($translation);
        }

        return $translation->setAdminSubject($value);
    }

    /**
     * Translation getter. AUTOGENERATED
     *
     * @return string
     */
    public function getAdminText()
    {
        return $this->getSoftTranslation()->getAdminText();
    }

    /**
     * Translation setter. AUTOGENERATED
     *
     * @param string $value value to set
     *
     * @return void
     */
    public function setAdminText($value)
    {
        $translation = $this->getTranslation();

        if (!$this->hasTranslation($translation->getCode())) {
            $this->addTranslations($translation);
        }

        return $translation->setAdminText($value);
    }


}